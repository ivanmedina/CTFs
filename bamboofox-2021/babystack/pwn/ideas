0x401379 main
96 bytes reservados
se arma canary
0000000000401381 mov     rax, fs:40
.text:00000000004013E3 cmp     [rbp+var_54], 63 //for
.text:00000000004013E7 jle     short loc_

000000000040131D print name
buf = byte_ptr 32 te reserva 32b en stack
var_8= qword ptr -8

****************** canary name ************************
0x401325    mov    rax, qword ptr fs:[0x28]
0x40132e    mov    qword ptr [rbp - 8], rax

****************** PUTS ************************

0x0000000000401030  puts@plt

****************** RAX name ************************

pwndbg> x/gx $rax
0x7fffffffdc90:	0x00007ffff7ffb2a8
pwndbg> info register $rax
rax            0x7fffffffdc90	140737488346256

****************** token y name ************************

entra a la funcion que lee el token
.text:0000000000401237 givemeToken proc near
.text:0000000000401237
.text:0000000000401237 var_38= qword ptr -38h
.text:0000000000401237 s1= qword ptr -28h
.text:0000000000401237 buf= byte ptr -20h
.text:0000000000401237 var_8= qword ptr 
se reserban 64 byes
000000000040123F mov     [rbp+var_38], rdi
y ahora rbp +38 tiene mis AAA'S osea mi name


pwndbg> stack 0x0c
00:0000│ rsp  0x7fffffffdca8 —▸ 0x4011bb ◂— 0x48c0458d48b84589
01:0008│      0x7fffffffdcb0 ◂— 'deadbeef\t'
02:0010│      0x7fffffffdcb8 ◂— 0x1000000009 /* '\t' */
03:0018│ rsi  0x7fffffffdcc0 ◂— 'BBBBBBBB\nCCCCCC\n'
04:0020│      0x7fffffffdcc8 ◂— '\nCCCCCC\n'
05:0028│      0x7fffffffdcd0 —▸ 0x7fffffffdd00 —▸ 0x7fffffffdd70 —▸ 0x401460 ◂— 0x495641d789495741
06:0030│      0x7fffffffdcd8 —▸ 0x401362 ◂— 0x334864f8458b4890
07:0038│      0x7fffffffdce0 ◂— 'AAAAAAAA\n'
08:0040│      0x7fffffffdce8 ◂— 0xa /* '\n' */
09:0048│      0x7fffffffdcf0 —▸ 0x7fffffffdd70 —▸ 0x401460 ◂— 0x495641d789495741
0a:0050│      0x7fffffffdcf8 ◂— 0x562a04dca9023800
0b:0058│ rbp  0x7fffffffdd00 —▸ 0x7fffffffdd70 —▸ 0x401460 ◂— 0x495641d789495741
pwndbg> i r $rip
rip            0x7ffff7af4191	0x7ffff7af4191 <__GI___libc_read+17>
pwndbg> backtrace
#0  0x00007ffff7af4191 in __GI___libc_read (fd=0, buf=0x7fffffffdcc0, nbytes=16) at ../sysdeps/unix/sysv/linux/read.c:27
#1  0x00000000004011bb in ?? ()
#2  0x0000000000401407 in ?? ()
#3  0x00007ffff7a05b97 in __libc_start_main (main=0x401379, argc=1, argv=0x7fffffffde58, init=<optimized out>, fini=<optimized out>, rtld_fini=<optimized out>, stack_end=0x7fffffffde48) at ../csu/libc-start.c:310
#4  0x00000000004010ca in ?? ()

****************** puts name ************************

00000000004012B2 lea     rdi, aHelloPleaseGiv ; "Hello, please give me your token: "
00000000004012B9 call    _puts


   0x4012be    lea    rax, [rbp - 0x20]  <<<<<<<<<<<<<<<<<<<<<<<<<<  ***
   0x4012c2    mov    edx, 0x10
 ► 0x4012c7    mov    rsi, rax <0x7ffff7dd07e3>
   0x4012ca    mov    edi, 0
   0x4012cf    call   read@plt <read@plt>


07:0038│      0x7fffffffdce0 ◂— 'AAAAAAAA\n'
08:0040│      0x7fffffffdce8 ◂— 0xa /* '\n' */
09:0048│      0x7fffffffdcf0 —▸ 0x7fffffffdd70 —▸ 0x401460 ◂— 0x495641d789495741
0a:0050│      0x7fffffffdcf8 ◂— 0x562a04dca9023800
0b:0058│ rbp  0x7fffffffdd00 —▸ 0x7fffffffdd70 —▸ 0x401460 ◂— 0x495641d789495741


aqui se guardan mis BBBB que es el token
*RCX  0x7fffffffdc60 ◂— 'BBBBBBBBBBBBBBBB'
0x4012d4    lea    rcx, [rbp - 0x20]

 ► 0x4012e7    call   memcmp@plt <memcmp@plt>
        s1: 0x7fffffffdc68 ◂— 'BBBBBBBB'
        s2: 0x7fffffffdc60 ◂— 'BBBBBBBBBBBBBBBB'
        n: 0x8


 ► 0x4012ec    test   eax, eax
   0x4012ee    je     0x401306 <0x401306>

si paso la validacion del stack canary

pwndbg> i r $rsp
rsp            0x7fffffffdc40	0x7fffffffdc40



pwndbg> i r $fs_base
fs_base        0x7ffff7fe24c0	140737354015936
pwndbg> x/gx 0x7ffff7fe24c0+0x28
0x7ffff7fe24e8:	0x8ae6dadb4128d600
pwndbg> x/gx $rax
0x8ae6dadb4128d600


estoy 64 bytes desde rsp a rbp, 
desde rsp al canary son
>>> 0xdca8-0xdc40
104 bytes

sale de print name y ahora si pide el str1 y 2
00000000004013F3 mov     eax, 0

00000000004013F8 call    leerStrings

0x4013f8    call   0x401182 <0x401182>




https://web.archive.org/web/20120822144129/http://www.cin.ufpe.br/~if817/arquivos/asmtut/index.html
https://github.com/torvalds/linux/blob/v3.13/arch/x86/syscalls/syscall_64.tbl#L69
https://refspecs.linuxfoundation.org/elf/x86_64-abi-0.99.pdf
https://github.com/hjl-tools/x86-psABI/wiki/X86-psABI



